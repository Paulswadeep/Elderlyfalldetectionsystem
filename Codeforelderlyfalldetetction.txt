// Basic demo for accelerometer readings from Adafruit MPU6050
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
Adafruit_MPU6050 mpu;
void setup(void) {
 Serial.begin(115200);
 while (!Serial)
 delay(10); // will pause Zero, Leonardo, etc until serial console opens
 Serial.println("Adafruit MPU6050 test!");
 // Try to initialize!
 if (!mpu.begin()) {
 Serial.println("Failed to find MPU6050 chip");
 while (1) {
 delay(10);
 }
 }
 Serial.println("MPU6050 Found!");
 mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
 Serial.print("Accelerometer range set to: ");
 switch (mpu.getAccelerometerRange()) {
 case MPU6050_RANGE_2_G:
 Serial.println("+-2G");
 break;
 case MPU6050_RANGE_4_G:
 Serial.println("+-4G");
 break;
 case MPU6050_RANGE_8_G:
 Serial.println("+-8G");
 break;
 case MPU6050_RANGE_16_G:
 Serial.println("+-16G");
 break;
 }
 mpu.setGyroRange(MPU6050_RANGE_500_DEG);
 Serial.print("Gyro range set to: ");
 switch (mpu.getGyroRange()) {
 case MPU6050_RANGE_250_DEG:
 Serial.println("+- 250 deg/s");
 break;
 case MPU6050_RANGE_500_DEG:
 Serial.println("+- 500 deg/s");
 break;
 case MPU6050_RANGE_1000_DEG:
 Serial.println("+- 1000 deg/s");
 break;
 case MPU6050_RANGE_2000_DEG:
 Serial.println("+- 2000 deg/s");
 break;
 }
 mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
 Serial.print("Filter bandwidth set to: ");
 switch (mpu.getFilterBandwidth()) {
 case MPU6050_BAND_260_HZ:
 Serial.println("260 Hz");
 break;
 case MPU6050_BAND_184_HZ:
 Serial.println("184 Hz");
 break;
 case MPU6050_BAND_94_HZ:
 Serial.println("94 Hz");
 break;
 case MPU6050_BAND_44_HZ:
 Serial.println("44 Hz");
 break;
 case MPU6050_BAND_21_HZ:
 Serial.println("21 Hz");
 break;
 case MPU6050_BAND_10_HZ:
 Serial.println("10 Hz");
 break;
 case MPU6050_BAND_5_HZ:
 Serial.println("5 Hz");
 break;
 }
 Serial.println("");
 delay(100);
}
void loop() {
 /* Get new sensor events with the readings */
 sensors_event_t a, g, temp;
 mpu.getEvent(&a, &g, &temp);
 /* Print out the values */
 Serial.print("Acceleration X: ");
 Serial.print(a.acceleration.x);
 Serial.print(", Y: ");
 Serial.print(a.acceleration.y);
 Serial.print(", Z: ");
 Serial.print(a.acceleration.z);
 Serial.println(" m/s^2");
 Serial.print("Rotation X: ");
 Serial.print(g.gyro.x);
 Serial.print(", Y: ");
 Serial.print(g.gyro.y);
 Serial.print(", Z: ");
 Serial.print(g.gyro.z);
 Serial.println(" rad/s");
 Serial.print("Temperature: ");
 Serial.print(temp.temperature);
 Serial.println(" degC");
 Serial.println("");
 delay(500);
}
#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Arduino_JSON.h>
#include "SPIFFS.h"
// Replace with your network credentials
const char* ssid = "REPLACE_WITH_YOUR_SSID";
const char* password = "REPLACE_WITH_YOUR_PASSWORD";
// Create AsyncWebServer object on port 80
AsyncWebServer server(80);
// Create an Event Source on /events
AsyncEventSource events("/events");
// Json Variable to Hold Sensor Readings
JSONVar readings;
// Timer variables
unsigned long lastTime = 0; 
unsigned long lastTimeTemperature = 0;
unsigned long lastTimeAcc = 0;
unsigned long gyroDelay = 10;
unsigned long temperatureDelay = 1000;
unsigned long accelerometerDelay = 200;
// Create a sensor object
Adafruit_MPU6050 mpu;
sensors_event_t a, g, temp;
float gyroX, gyroY, gyroZ;
float accX, accY, accZ;
float temperature;
//Gyroscope sensor deviation
float gyroXerror = 0.07;
float gyroYerror = 0.03;
float gyroZerror = 0.01;
// Init MPU6050
void initMPU(){
 if (!mpu.begin()) {
 Serial.println("Failed to find MPU6050 chip");
 while (1) {
 delay(10);
 }
 }
 Serial.println("MPU6050 Found!");
}
void initSPIFFS() {
 if (!SPIFFS.begin()) {
 Serial.println("An error has occurred while mounting SPIFFS");
 }
 Serial.println("SPIFFS mounted successfully");
}
// Initialize WiFi
void initWiFi() {
 WiFi.mode(WIFI_STA);
 WiFi.begin(ssid, password);
 Serial.println("");
 Serial.print("Connecting to WiFi...");
 while (WiFi.status() != WL_CONNECTED) {
 Serial.print(".");
 delay(1000);
 }
 Serial.println("");
 Serial.println(WiFi.localIP());
}
String getGyroReadings(){
 mpu.getEvent(&a, &g, &temp);
 float gyroX_temp = g.gyro.x;
 if(abs(gyroX_temp) > gyroXerror) {
 gyroX += gyroX_temp/50.00;
 }
 
 float gyroY_temp = g.gyro.y;
 if(abs(gyroY_temp) > gyroYerror) {
 gyroY += gyroY_temp/70.00;
 }
 float gyroZ_temp = g.gyro.z;
 if(abs(gyroZ_temp) > gyroZerror) {
 gyroZ += gyroZ_temp/90.00;
 }
 readings["gyroX"] = String(gyroX);
 readings["gyroY"] = String(gyroY);
 readings["gyroZ"] = String(gyroZ);
 String jsonString = JSON.stringify(readings);
 return jsonString;
}
String getAccReadings() {
 mpu.getEvent(&a, &g, &temp);
 // Get current acceleration values
 accX = a.acceleration.x;
 accY = a.acceleration.y;
 accZ = a.acceleration.z;
 readings["accX"] = String(accX);
 readings["accY"] = String(accY);
 readings["accZ"] = String(accZ);
 String accString = JSON.stringify (readings);
 return accString;
}
String getTemperature(){
 mpu.getEvent(&a, &g, &temp);
 temperature = temp.temperature;
 return String(temperature);
}
void setup() {
 Serial.begin(115200);
 initWiFi();
 initSPIFFS();
 initMPU();
 // Handle Web Server
 server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
 request->send(SPIFFS, "/index.html", "text/html");
 });
 server.serveStatic("/", SPIFFS, "/");
 server.on("/reset", HTTP_GET, [](AsyncWebServerRequest *request){
 gyroX=0;
 gyroY=0;
 gyroZ=0;
 request->send(200, "text/plain", "OK");
 });
 server.on("/resetX", HTTP_GET, [](AsyncWebServerRequest *request){
 gyroX=0;
 request->send(200, "text/plain", "OK");
 });
 server.on("/resetY", HTTP_GET, [](AsyncWebServerRequest *request){
 gyroY=0;
 request->send(200, "text/plain", "OK");
 });
 server.on("/resetZ", HTTP_GET, [](AsyncWebServerRequest *request){
 gyroZ=0;
 request->send(200, "text/plain", "OK");
 });
 // Handle Web Server Events
 events.onConnect([](AsyncEventSourceClient *client){
 if(client->lastId()){
 Serial.printf("Client reconnected! Last message ID that it got is: %u\n", client-
>lastId());
 }
 // send event with message "hello!", id current millis
 // and set reconnect delay to 1 second
 client->send("hello!", NULL, millis(), 10000);
 });
 server.addHandler(&events);
 server.begin();
}
void loop() {
 if ((millis() - lastTime) > gyroDelay) {
 // Send Events to the Web Server with the Sensor Readings
 events.send(getGyroReadings().c_str(),"gyro_readings",millis());
 lastTime = millis();
 }
 if ((millis() - lastTimeAcc) > accelerometerDelay) {
 // Send Events to the Web Server with the Sensor Readings
 events.send(getAccReadings().c_str(),"accelerometer_readings",millis());
 lastTimeAcc = millis();
 }
 if ((millis() - lastTimeTemperature) > temperatureDelay) {
 // Send Events to the Web Server with the Sensor Readings
 events.send(getTemperature().c_str(),"temperature_reading",millis());
 lastTimeTemperature = millis();
 }
}


// Basic demo for accelerometer readings from Adafruit MPU6050
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
Adafruit_MPU6050 mpu;
void setup(void) {
 Serial.begin(115200);
 while (!Serial)
 delay(10); // will pause Zero, Leonardo, etc until serial console opens
 Serial.println("Adafruit MPU6050 test!");
 // Try to initialize!
 if (!mpu.begin()) {
 Serial.println("Failed to find MPU6050 chip");
 while (1) {
 delay(10);
 }
 }
 Serial.println("MPU6050 Found!");
 mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
 Serial.print("Accelerometer range set to: ");
 switch (mpu.getAccelerometerRange()) {
 case MPU6050_RANGE_2_G:
 Serial.println("+-2G");
 break;
 case MPU6050_RANGE_4_G:
 Serial.println("+-4G");
 break;
 case MPU6050_RANGE_8_G:
 Serial.println("+-8G");
 break;
 case MPU6050_RANGE_16_G:
 Serial.println("+-16G");
 break;
 }
 mpu.setGyroRange(MPU6050_RANGE_500_DEG);
 Serial.print("Gyro range set to: ");
 switch (mpu.getGyroRange()) {
 case MPU6050_RANGE_250_DEG:
 Serial.println("+- 250 deg/s");
 break;
 case MPU6050_RANGE_500_DEG:
 Serial.println("+- 500 deg/s");
 break;
 case MPU6050_RANGE_1000_DEG:
 Serial.println("+- 1000 deg/s");
 break;
 case MPU6050_RANGE_2000_DEG:
 Serial.println("+- 2000 deg/s");
 break;
 }
 mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
 Serial.print("Filter bandwidth set to: ");
 switch (mpu.getFilterBandwidth()) {
 case MPU6050_BAND_260_HZ:
 Serial.println("260 Hz");
 break;
 case MPU6050_BAND_184_HZ:
 Serial.println("184 Hz");
 break;
 case MPU6050_BAND_94_HZ:
 Serial.println("94 Hz");
 break;
 case MPU6050_BAND_44_HZ:
 Serial.println("44 Hz");
 break;
 case MPU6050_BAND_21_HZ:
 Serial.println("21 Hz");
 break;
 case MPU6050_BAND_10_HZ:
 Serial.println("10 Hz");
 break;
 case MPU6050_BAND_5_HZ:
 Serial.println("5 Hz");
 break;
 }
 Serial.println("");
 delay(100);
}
void loop() {
 /* Get new sensor events with the readings */
 sensors_event_t a, g, temp;
 mpu.getEvent(&a, &g, &temp);
 /* Print out the values */
 Serial.print("Acceleration X: ");
 Serial.print(a.acceleration.x);
 Serial.print(", Y: ");
 Serial.print(a.acceleration.y);
 Serial.print(", Z: ");
 Serial.print(a.acceleration.z);
 Serial.println(" m/s^2");
 Serial.print("Rotation X: ");
 Serial.print(g.gyro.x);
 Serial.print(", Y: ");
 Serial.print(g.gyro.y);
 Serial.print(", Z: ");
 Serial.print(g.gyro.z);
 Serial.println(" rad/s");
 Serial.print("Temperature: ");
 Serial.print(temp.temperature);
 Serial.println(" degC");
 Serial.println("");
 delay(500);
}


#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Arduino_JSON.h>
#include "SPIFFS.h"
// Replace with your network credentials
const char* ssid = "REPLACE_WITH_YOUR_SSID";
const char* password = "REPLACE_WITH_YOUR_PASSWORD";
// Create AsyncWebServer object on port 80
AsyncWebServer server(80);
// Create an Event Source on /events
AsyncEventSource events("/events");
// Json Variable to Hold Sensor Readings
JSONVar readings;
// Timer variables
unsigned long lastTime = 0; 
unsigned long lastTimeTemperature = 0;
unsigned long lastTimeAcc = 0;
unsigned long gyroDelay = 10;
unsigned long temperatureDelay = 1000;
unsigned long accelerometerDelay = 200;
// Create a sensor object
Adafruit_MPU6050 mpu;
sensors_event_t a, g, temp;
float gyroX, gyroY, gyroZ;
float accX, accY, accZ;
float temperature;
//Gyroscope sensor deviation
float gyroXerror = 0.07;
float gyroYerror = 0.03;
float gyroZerror = 0.01;
// Init MPU6050
void initMPU(){
 if (!mpu.begin()) {
 Serial.println("Failed to find MPU6050 chip");
 while (1) {
 delay(10);
 }
 }
 Serial.println("MPU6050 Found!");
}
void initSPIFFS() {
 if (!SPIFFS.begin()) {
 Serial.println("An error has occurred while mounting SPIFFS");
 }
 Serial.println("SPIFFS mounted successfully");
}
// Initialize WiFi
void initWiFi() {
 WiFi.mode(WIFI_STA);
 WiFi.begin(ssid, password);
 Serial.println("");
 Serial.print("Connecting to WiFi...");
 while (WiFi.status() != WL_CONNECTED) {
 Serial.print(".");
 delay(1000);
 }
 Serial.println("");
 Serial.println(WiFi.localIP());
}
String getGyroReadings(){
 mpu.getEvent(&a, &g, &temp);
 float gyroX_temp = g.gyro.x;
 if(abs(gyroX_temp) > gyroXerror) {
 gyroX += gyroX_temp/50.00;
 }
 
 float gyroY_temp = g.gyro.y;
 if(abs(gyroY_temp) > gyroYerror) {
 gyroY += gyroY_temp/70.00;
 }
 float gyroZ_temp = g.gyro.z;
 if(abs(gyroZ_temp) > gyroZerror) {
 gyroZ += gyroZ_temp/90.00;
 }
 readings["gyroX"] = String(gyroX);
 readings["gyroY"] = String(gyroY);
 readings["gyroZ"] = String(gyroZ);
 String jsonString = JSON.stringify(readings);
 return jsonString;
}
String getAccReadings() {
 mpu.getEvent(&a, &g, &temp);
 // Get current acceleration values
 accX = a.acceleration.x;
 accY = a.acceleration.y;
 accZ = a.acceleration.z;
 readings["accX"] = String(accX);
 readings["accY"] = String(accY);
 readings["accZ"] = String(accZ);
 String accString = JSON.stringify (readings);
 return accString;
}
String getTemperature(){
 mpu.getEvent(&a, &g, &temp);
 temperature = temp.temperature;
 return String(temperature);
}
void setup() {
 Serial.begin(115200);
 initWiFi();
 initSPIFFS();
 initMPU();
 // Handle Web Server
 server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
 request->send(SPIFFS, "/index.html", "text/html");
 });
 server.serveStatic("/", SPIFFS, "/");
 server.on("/reset", HTTP_GET, [](AsyncWebServerRequest *request){
 gyroX=0;
 gyroY=0;
 gyroZ=0;
 request->send(200, "text/plain", "OK");
 });
 server.on("/resetX", HTTP_GET, [](AsyncWebServerRequest *request){
 gyroX=0;
 request->send(200, "text/plain", "OK");
 });
 server.on("/resetY", HTTP_GET, [](AsyncWebServerRequest *request){
 gyroY=0;
 request->send(200, "text/plain", "OK");
 });
 server.on("/resetZ", HTTP_GET, [](AsyncWebServerRequest *request){
 gyroZ=0;
 request->send(200, "text/plain", "OK");
 });
 // Handle Web Server Events
 events.onConnect([](AsyncEventSourceClient *client){
 if(client->lastId()){
 Serial.printf("Client reconnected! Last message ID that it got is: %u\n", client-
>lastId());
 }
 // send event with message "hello!", id current millis
 // and set reconnect delay to 1 second
 client->send("hello!", NULL, millis(), 10000);
 });
 server.addHandler(&events);
 server.begin();
}
void loop() {
 if ((millis() - lastTime) > gyroDelay) {
 // Send Events to the Web Server with the Sensor Readings
 events.send(getGyroReadings().c_str(),"gyro_readings",millis());
 lastTime = millis();
 }
 if ((millis() - lastTimeAcc) > accelerometerDelay) {
 // Send Events to the Web Server with the Sensor Readings
 events.send(getAccReadings().c_str(),"accelerometer_readings",millis());
 lastTimeAcc = millis();
 }
 if ((millis() - lastTimeTemperature) > temperatureDelay) {
 // Send Events to the Web Server with the Sensor Readings
 events.send(getTemperature().c_str(),"temperature_reading",millis());
 lastTimeTemperature = millis();
 }
}
#include "SPIFFS.h"
void setup() {
 Serial.begin(115200);
 if(!SPIFFS.begin(true)){
 Serial.println("An Error has occurred while mounting SPIFFS");
 return;
 }
 File file = SPIFFS.open("/test_example.txt");
 if(!file){
 Serial.println("Failed to open file for reading");
 return;
 }
 
 Serial.println("File Content:");
 while(file.available()){
 Serial.write(file.read());
 }
 file.close();
}
void loop() {
}